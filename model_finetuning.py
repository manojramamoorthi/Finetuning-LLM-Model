# -*- coding: utf-8 -*-
"""Model_Finetuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1To4TMbCsWJphVCo-eGB1fhOZ1W_X1XTk
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# import os
# if "COLAB_" not in "".join(os.environ.keys()):
#      !pip install unsloth
# else:
#      !pip install --no-deps bitsandbytes accelerate xformers==0.0.29.post3 peft trl triton cut_cross_entropy unsloth_zoo
#      !pip install sentencepiece protobuf "datasets>=3.4.1" huggingface_hub hf_transfer
#      !pip install --no-deps unsloth

from unsloth import FastLanguageModel
import torch
from datasets import load_dataset
import pandas as pd

# Model configuration
max_seq_length = 2048
dtype = None  # None for auto detection
load_in_4bit = True  # Use 4bit quantization to reduce memory usage

# Load the model
model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Llama-3.2-3B-Instruct",  # or "unsloth/Llama-3.2-1B-Instruct"
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
)

# Add LoRA adapters
model = FastLanguageModel.get_peft_model(
    model,
    r = 16,
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0,
    bias = "none",
    use_gradient_checkpointing = "unsloth",
    random_state = 3407,
    use_rslora = False,
    loftq_config = None,
)

# Load and prepare the NCERT Physics dataset
print("Loading NCERT Physics 12th dataset...")
dataset = load_dataset("KadamParth/NCERT_Physics_12th", split="train")

# Let's examine the dataset structure first
print("Dataset columns:", dataset.column_names)
print("First example:", dataset[0])
print("Dataset size:", len(dataset))

# Set up chat template
from unsloth.chat_templates import get_chat_template

tokenizer = get_chat_template(
    tokenizer,
    chat_template = "llama-3.1",
)

def create_physics_conversations(examples):
    """
    Convert NCERT Physics dataset to conversation format
    Assumes the dataset has question and answer fields
    """
    conversations = []

    # Adjust these field names based on your dataset structure
    # Common field names might be: 'question', 'answer', 'text', 'content', etc.
    # You may need to modify this based on the actual structure

    for i in range(len(examples['Question'])):  # Adjust field name as needed
        # System message to constrain the model to NCERT Physics knowledge
        system_message = {
            "role": "system",
            "content": "You are an expert physics tutor specialized in NCERT Class 12 Physics. Answer questions clearly and accurately based only on NCERT Class 12 Physics curriculum. If a question is outside the scope of NCERT Class 12 Physics, politely mention that you can only help with NCERT Class 12 Physics topics."
        }

        # User question
        user_message = {
            "role": "user",
            "content": examples['Question'][i]  # Adjust field name as needed
        }

        # Assistant answer
        assistant_message = {
            "role": "assistant",
            "content": examples['Answer'][i]  # Adjust field name as needed
        }

        conversation = [system_message, user_message, assistant_message]
        conversations.append(conversation)

    return {"conversations": conversations}

def formatting_prompts_func(examples):
    """Convert conversations to text format using chat template"""
    convos = examples["conversations"]
    texts = [tokenizer.apply_chat_template(convo, tokenize=False, add_generation_prompt=False) for convo in convos]
    return {"text": texts}

# Process the dataset
print("Processing dataset...")

# First, let's inspect the actual structure of your dataset
sample = dataset[0]
print("Sample data structure:")
for key, value in sample.items():
    print(f"  {key}: {type(value)} - {str(value)[:100]}...")

# You may need to adjust the field names in create_physics_conversations function
# based on the actual structure of your dataset

# Apply the conversation creation
try:
    dataset = dataset.map(create_physics_conversations, batched=True, remove_columns=dataset.column_names)
    dataset = dataset.map(formatting_prompts_func, batched=True)

    print("Successfully processed dataset!")
    print("Sample processed text:")
    print(dataset[0]["text"][:500] + "...")

except Exception as e:
    print(f"Error processing dataset: {e}")
    print("Please check the field names in your dataset and adjust the create_physics_conversations function accordingly.")
    # You can inspect your dataset structure here and modify the function

# Training configuration
from trl import SFTTrainer
from transformers import TrainingArguments, DataCollatorForSeq2Seq
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    data_collator = DataCollatorForSeq2Seq(tokenizer = tokenizer),
    dataset_num_proc = 2,
    packing = False,
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        num_train_epochs = 1,  # Adjust based on your dataset size
        max_steps = 100,  # Increase for better training
        learning_rate = 2e-4,
        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
        report_to = "none",
    ),
)

# Train only on assistant responses
from unsloth.chat_templates import train_on_responses_only
trainer = train_on_responses_only(
    trainer,
    instruction_part = "<|start_header_id|>user<|end_header_id|>\n\n",
    response_part = "<|start_header_id|>assistant<|end_header_id|>\n\n",
)

# Show memory stats before training
gpu_stats = torch.cuda.get_device_properties(0)
start_gpu_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
max_memory = round(gpu_stats.total_memory / 1024 / 1024 / 1024, 3)
print(f"GPU = {gpu_stats.name}. Max memory = {max_memory} GB.")
print(f"{start_gpu_memory} GB of memory reserved.")

# Start training
print("Starting training...")
trainer_stats = trainer.train()

# Show final memory and time stats
used_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
used_memory_for_lora = round(used_memory - start_gpu_memory, 3)
used_percentage = round(used_memory / max_memory * 100, 3)
lora_percentage = round(used_memory_for_lora / max_memory * 100, 3)
print(f"{trainer_stats.metrics['train_runtime']} seconds used for training.")
print(f"{round(trainer_stats.metrics['train_runtime']/60, 2)} minutes used for training.")
print(f"Peak reserved memory = {used_memory} GB.")
print(f"Peak reserved memory for training = {used_memory_for_lora} GB.")
print(f"Peak reserved memory % of max memory = {used_percentage} %.")
print(f"Peak reserved memory for training % of max memory = {lora_percentage} %.")

# Test the model
print("\n" + "="*50)
print("TESTING THE FINE-TUNED MODEL")
print("="*50)

FastLanguageModel.for_inference(model)

# Test with a physics question
test_messages = [
    {"role": "user", "content": "Explain the photoelectric effect and Einstein's equation for it."},
]

inputs = tokenizer.apply_chat_template(
    test_messages,
    tokenize = True,
    add_generation_prompt = True,
    return_tensors = "pt",
).to("cuda")

from transformers import TextStreamer
text_streamer = TextStreamer(tokenizer, skip_prompt = True)

print("Model response:")
_ = model.generate(input_ids = inputs, streamer = text_streamer, max_new_tokens = 256,
                   use_cache = True, temperature = 0.7, min_p = 0.1)

# Save the model
print("\n" + "="*30)
print("SAVING THE MODEL")
print("="*30)

model.save_pretrained("ncert_physics_model")
tokenizer.save_pretrained("ncert_physics_model")

print("Model saved successfully!")
print("You can load it later using:")
print('model, tokenizer = FastLanguageModel.from_pretrained("ncert_physics_model")')

# Optional: Save to different formats
# Uncomment the lines below if you want to save in different formats

# Save to 16bit merged model
# model.save_pretrained_merged("ncert_physics_16bit", tokenizer, save_method = "merged_16bit")

# Save to GGUF format (for llama.cpp)
# model.save_pretrained_gguf("ncert_physics_gguf", tokenizer, quantization_method = "q4_k_m")

print("\nFine-tuning completed! Your model is now specialized for NCERT Class 12 Physics questions.")